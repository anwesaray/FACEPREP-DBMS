1. Find the total revenue (price × quantity) for each item, sorted from highest to lowest.
db.sales.aggregate([
  {
        $project: {
          item: 1,
          revenue: { $multiply: ["$price", "$quantity"] }
        } },
  {
        $group: {
          _id: "$item",
          totalRevenue: { $sum: "$revenue" }
        } },
  {
        $sort: { totalRevenue: -1 }
  }]);
2. Calculate the total quantity sold per month in 2022.
db.sales.aggregate([
  {
        $match: {
          date: {
            $gte: ISODate("2022-01-01T00:00:00Z"),
            $lt: ISODate("2023-01-01T00:00:00Z")
          }  } },
  {
        $group: {
          _id: { $dateToString: { format: "%Y-%m", date: "$date" } },
          totalQuantity: { $sum: "$quantity" }
        }  },
  {
        $sort: { _id: 1 } // Sort by month ascending }]);

3. Find all items where price is greater than 10 and size is not 'Short'.

db.sales.find({
  price: { $gt: 10 },
  size: { $ne: "Short" }
});

4. Get all Cappuccino sales with quantity between 10 and 20.

db.sales.find({
  item: "Cappuccino",
  quantity: { $gte: 10, $lte: 20 }
});

5. Query to find items where the item name starts with "A".

db.sales.find({
  item: { $regex: /^A/, $options: 'i' }
});

6. Find all records that do not have the field size.
db.sales.find({
  size: { $not: { $type: "string" } }
});

7. Find all sales that are either "Grande" or "Tall" but not "Americanos".

db.sales.find({
  size: { $in: ["Grande", "Tall"] },
  item: { $ne: "Americanos" }
});

8. List all items sold in February 2022.

db.sales.find({
  date: {
        $gte: ISODate("2022-02-01T00:00:00Z"),
        $lt: ISODate("2022-03-01T00:00:00Z")
  }
});

9. Find sales where the quantity is more than twice the price.



var salesQuery = {
  $expr: {
        $gt: [
          "$quantity",                // Left side: quantity field
          { $multiply: ["$price", 2] }  // Right side: price * 2
        ]  }};
db.sales.find(salesQuery);

10. Find all sales where the price is greater than the average price of their respective size.


 
var pipeline = [  {
        $group: {
          _id: "$size",
          avgPrice: { $avg: "$price" }
        }},  {
        $lookup: {
          from: "sales",
          localField: "_id",          // size from group
          foreignField: "size",   // size from sales
          as: "matchedSales"
        }
  },
  { $unwind: "$matchedSales" },
  {
        $match: {
          $expr: {
            $gt: ["$matchedSales.price", "$avgPrice"]
          }}},  {
        $replaceRoot: {
          newRoot: "$matchedSales"
        }}];
db.sales.aggregate(pipeline);

11. Find Sales Where the Day of Week Matches Quantity's Last Digit [Filter sales where the day of the week (0=Sunday, 1=Monday, etc.) matches the last digit of quantity


var dayMatchesLastDigitPipeline = [
  {
        $addFields: {
          dayOfWeek: { $dayOfWeek: "$date" },                 // 1=Sunday, 2=Monday, ..., 7=Saturday
          quantityLastDigit: { $mod: ["$quantity", 10] }  // Get last digit of quantity
        }},{    $match: {
          $expr: {
            $eq: [
              { $subtract: ["$dayOfWeek", 1] }, // Convert to 0-indexed (0=Sunday)
              "$quantityLastDigit"
            ]}}},{
        $project: {
          item: 1,
          quantity: 1,
          date: 1,
          price: 1,
          size: 1,
          totalRevenue: { $multiply: ["$price", "$quantity"] },
          dayOfWeek: 1,
          quantityLastDigit: 1} }];
db.sales.aggregate(dayMatchesLastDigitPipeline);

12. Find Sales Where the Month is Prime and Quantity is Odd [Filter sales where the month (1-12) is a prime number (2,3,5,7,11) AND quantity is odd]

db.sales.aggregate([
  {
        $addFields: {
          saleMonth: { $month: "$date" }  // Extract month (1–12)
        }},{
     $match: {
          $expr: {
            $and: [
              { $in: ["$saleMonth", [2, 3, 5, 7, 11]] },  // Prime months
              { $eq: [{ $mod: ["$quantity", 2] }, 1] }        // Quantity is odd
            ]}} }
]);
 
13. Find Sales with "Suspicious Quantities" (Divisible by 5 or 7) [Filter sales where quantity is divisible by 5 or 7].
 
db.sales.aggregate([
  {
        $match: {
          $expr: {
            $or: [
              { $eq: [{ $mod: ["$quantity", 5] }, 0] },
              { $eq: [{ $mod: ["$quantity", 7] }, 0] }
            ]}}, {
        $project: {
          item: 1,                                        
          quantity: 1,
          price: 1,
          date: 1
        }}]);